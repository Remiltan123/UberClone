.about-container {
    background: url('../Images/about1.png') no-repeat center center;
    background-size: cover;
    height: 100;
  }
  
  .about-content {
    background-color: rgba(192, 120, 120, 0.4);
    padding: 45px;
  }
  
  .about-text h1 {
    color: #530C0C;
    font-size: 2.5rem;
    margin-bottom: 20px;
  }
  
  .about-text p {
    font-size: 1.2rem;
    color: #f1eded;
    margin-bottom: 30px;
  }
  
  .cta-button {
    background-color: #FA7E0A;
    color: #F7F6DE;
    border: none;
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 5px;
  }
  
  .what-we-do h2 {
    font-size: 2rem;
    color: #FA7E0A;
    margin-bottom: 20px;
  }
  
  .service-item {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .icon {
    font-size: 2rem;
    color: #FA7E0A;
    margin-right: 15px;
  }
  
  .service-item h3 {
    color: #530C0C;
    margin: 0;
  }
  
  .service-item p {
    color: #eee5e5;
    margin: 0;
  }
  



  /*


  
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import {jwtDecode} from 'jwt-decode';
import RideConfirmationDialog from '../Components/rideConfirmationDialog.js';

// Fix for default marker icon issue with Leaflet and Webpack
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

const UserDashboard = () => {
  const [pickup, setPickup] = useState('');
  const [dropoff, setDropoff] = useState('');
  const [pickupCoords, setPickupCoords] = useState(null);
  const [dropoffCoords, setDropoffCoords] = useState(null);
  const [userLocation, setUserLocation] = useState(null);
  const [mapCenter, setMapCenter] = useState([9.6615, 80.0255]);
  const [suggestions, setSuggestions] = useState([]);
  const [activeInput, setActiveInput] = useState('');
  const [vehicleType, setVehicleType] = useState('Car');
  const [numPassengers, setNumPassengers] = useState(1);
  const [showConfirmation, setShowConfirmation] = useState(false);

  const requestOptions = useMemo(() => ({
    method: 'GET',
    headers: new Headers({
      'x-rapidapi-key': '8a472b53f0msh95d7a25599742d7p1a6949jsn0b66b1ca8d8d',
		'x-rapidapi-host': 'google-map-places.p.rapidapi.com',
      Accept: 'application/json',
    }),
    redirect: 'follow',
  }), []);

  const geocode = useCallback(async (latlng) => {
    try {
      const response = await fetch(
        `https://google-map-places.p.rapidapi.com/maps/api/geocode/json?latlng=${latlng[0]},${latlng[1]}&language=en&region=en&location_type=APPROXIMATE`,
        requestOptions
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.results || [];
    } catch (error) {
      console.error('Error in geocoding:', error);
      return [];
    }
  }, [requestOptions]);

  useEffect(() => {
    const fetchUserLocation = async () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            setUserLocation([latitude, longitude]);
            setMapCenter([latitude, longitude]);

            const locationName = await geocode([latitude, longitude]);
            setPickup(locationName.length > 0 ? locationName[0].formatted_address : 'Unknown Location');
            setPickupCoords([latitude, longitude]);
          },
          (error) => {
            console.error('Error getting user location:', error);
          }
        );
      }
    };

    fetchUserLocation();
  }, [geocode]);

  const fetchPlaceSuggestions = async (query) => {
    try {
      const response = await fetch(
        `https://google-map-places.p.rapidapi.com/maps/api/geocode/json?address=${encodeURIComponent(query)}&language=en&region=en&result_type=administrative_area_level_1`,
        requestOptions
      );
      const data = await response.json();
      return data.results || [];
    } catch (error) {
      console.error('Error fetching geocoded location:', error);
      return [];
    }
  };

  const handleInputChange = async (e, setter, inputType) => {
    const value = e.target.value;
    setter(value);
    setActiveInput(inputType);
    if (value.length > 2) {
      const places = await fetchPlaceSuggestions(value);
      setSuggestions(places);
    } else {
      setSuggestions([]);
    }
  };

  const handleSuggestionSelect = (place, setter, coordsSetter) => {
    setter(place.formatted_address);
    coordsSetter([place.geometry.location.lat, place.geometry.location.lng]);
    setSuggestions([]);
    setActiveInput('');
  };

  const MapClickHandler = () => {
    useMapEvents({
      click: async (e) => {
        const { lat, lng } = e.latlng;
        const locationName = await geocode([lat, lng]);

        if (!pickupCoords) {
          setPickupCoords([lat, lng]);
          setPickup(locationName.length > 0 ? locationName[0].formatted_address : 'Unknown Location');
        } else if (!dropoffCoords) {
          setDropoffCoords([lat, lng]);
          setDropoff(locationName.length > 0 ? locationName[0].formatted_address : 'Unknown Location');
        }
      },
    });
    return null;
  };

  const handleSearchRide = () => {
    if (!pickupCoords || !dropoffCoords || !pickup || !dropoff || !vehicleType || !numPassengers) {
      alert('Please select valid pickup and dropoff locations.');
      return;
    }
    setShowConfirmation(true); // Show confirmation dialog
  };

  const handleConfirmRide = async () => {
    const token = localStorage.getItem('token');
    setShowConfirmation(false); // Close the confirmation dialog after confirming

    if (!token) {
      alert('You must be logged in to request a ride.');
      return;
    }

    try {
      const decodedToken = jwtDecode(token);

      const requestBody = {
        pickup: {
          address: pickup,
          coordinates: [pickupCoords[1], pickupCoords[0]]
        },
        dropoff: {
          address: dropoff,
          coordinates: [dropoffCoords[1], dropoffCoords[0]]
        },
        vehicleType,
        numPassengers
      };

      const response = await fetch('http://localhost:5000/api/ride-request/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorResponse = await response.json();
        throw new Error(errorResponse.message || 'Failed to create ride request');
      }

      const data = await response.json();
      alert('Ride request created successfully! Looking for nearby drivers...');
    } catch (error) {
      console.error('Error creating ride request:', error);
      alert(`Error creating ride request: ${error.message || 'Please try again.'}`);
    }
  };

  return (
    <div className="dashboard-container relative">
      <div className="map-section" style={{ zIndex: 0 }}>
        <MapContainer center={mapCenter} zoom={13} style={{ width: '100%', height: '500px' }}>
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
          <MapClickHandler />
          {userLocation && (
            <Marker position={userLocation}>
              <Popup>Your Location</Popup>
            </Marker>
          )}
          {pickupCoords && (
            <Marker position={pickupCoords}>
              <Popup>Pickup Location: {pickup}</Popup>
            </Marker>
          )}
          {dropoffCoords && (
            <Marker position={dropoffCoords}>
              <Popup>Drop-off Location: {dropoff}</Popup>
            </Marker>
          )}
        </MapContainer>
      </div>

      <div className="form-section">
        <h2>Search for Your Ride</h2>
        <div className="input-group">
          <label htmlFor="pickup">Pickup Location:</label>
          <input
            type="text"
            id="pickup"
            value={pickup}
            onChange={(e) => handleInputChange(e, setPickup, 'pickup')}
            placeholder="Enter pickup location or click on map"
          />
          {suggestions.length > 0 && activeInput === 'pickup' && (
            <div className="suggestions">
              {suggestions.map((place, index) => (
                <div key={index} onClick={() => handleSuggestionSelect(place, setPickup, setPickupCoords)}>
                  {place.formatted_address}
                </div>
              ))}
            </div>
          )}
        </div>
        <div className="input-group">
          <label htmlFor="dropoff">Drop-off Location:</label>
          <input
            type="text"
            id="dropoff"
            value={dropoff}
            onChange={(e) => handleInputChange(e, setDropoff, 'dropoff')}
            placeholder="Enter drop-off location or click on map"
          />
          {suggestions.length > 0 && activeInput === 'dropoff' && (
            <div className="suggestions">
              {suggestions.map((place, index) => (
                <div key={index} onClick={() => handleSuggestionSelect(place, setDropoff, setDropoffCoords)}>
                  {place.formatted_address}
                </div>
              ))}
            </div>
          )}
        </div>
        <div className="input-group">
          <label htmlFor="vehicleType">Vehicle Type:</label>
          <select id="vehicleType" value={vehicleType} onChange={(e) => setVehicleType(e.target.value)}>
            <option value="Car">Car</option>
            <option value="Van">Van</option>
            <option value="Bike">Bike</option>
          </select>
        </div>
        <div className="input-group">
          <label htmlFor="numPassengers">Number of Passengers:</label>
          <input
            type="number"
            id="numPassengers"
            value={numPassengers}
            onChange={(e) => setNumPassengers(e.target.value)}
            min="1"
            max="10"
          />
        </div>
        <button onClick={handleSearchRide} className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'>Search Ride</button>
      </div>

      {showConfirmation && (
        <div className="z-50"> 
          <RideConfirmationDialog
            pickup={pickup}
            dropoff={dropoff}
            vehicleType={vehicleType}
            numPassengers={numPassengers}
            onConfirm={handleConfirmRide}
            onCancel={() => setShowConfirmation(false)}
          />
        </div>
      )}
      
    </div>
  );
};

export default UserDashboard;
*/